---
editor:
    markdown: 
      wrap: sentence
---

# The Problem

<!-- 
Outlining the issue / weak point / problem to be solved by this proposal. This should be a compelling section that sets the reader up for the next section - the proposed solution!

It is important to cover:

 - [ ] What the problem is
 - [ ] Who it affects
 - [ ] Have there been previous attempts to resolve the problem
 - [ ] Why it should be tackled
-->

Geospatial computations in R are made possible by a group of R packages aimed at [spatial](https://cran.r-project.org/web/views/Spatial.html) and [spatio-temporal](https://cran.r-project.org/web/views/SpatioTemporal.html) data such as `terra`, `sf`, and `stars` [@pebesma2023; @hijmans2024].
Computations on spatial or spatio-temporal data can often be computationally intensive and slow when the underlying data is large (e.g. high-resolution global rasters).
Depending on the data source and operation, this can range from taking seconds, to days, or even weeks.
Managing complex geospatial workflows can be confusing and re-running entire data pipelines is likely to be very time-consuming.
The `targets` R package aims to aid with confusing and long-running workflows by automatically detecting dependencies among steps and only re-running steps that need to be re-run [@landau2021].
This seems like a natural fit for complex geospatial workflows in R.
However, geospatial packages like `terra` and `sf` don't work well with `targets` without extensive customization.

One notable difficulty is that `targets` saves the R objects  generated by computational steps to memory, by default to an .rds object. However, R objects generated by the `terra` package contain a C++ pointer to the data, rather than the data itself.
When one of these `terra` objects is saved (e.g. as a .rds) and read back into R, it loses information about the data it represents and no longer works.
To make these R objects portable and suitable for use with `targets` they need to be "marshaled" and "unmarshaled" requiring more complex code, for a custom format.

A second obstacle is that often geospatial data is written in multiple files. For example, [shapefiles](#0) are actually a collection of up to 12 files with different extensions.
This limits compatibility with `targets` because the intermediate objects stored in a `targets` pipeline are required to be single files with no file extension.

Both of these challenges (and others) have been solved in bespoke ways for individual projects, but to date these solutions have not been formalized and distributed as an R package.
The `targets` package is, by design, extensible and a number of packages have been created to allow `targets` to work for specialized needs.
For example, `stantargets` allows for using `targets` with [Stan](https://mc-stan.org/) models [@landau2021].
We hope that `geotargets` can be a widely used addition to the "[Targetopia](https://wlandau.github.io/targetopia/)" of packages that extend `targets`.
We believe this will unlock a powerful workflow management tool for a large group of R users that have previously been unable (or unwilling) to use it because of these challenges.
